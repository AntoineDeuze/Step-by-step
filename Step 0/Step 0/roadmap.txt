Step 0 :
1. Créer la structure minimale du projet
index.html avec navbar bootstrap
libs (bootstrap, jquery, icofont)
js/css/img (index.js/index.css/logo,favicon etc...)
app (dossier de l'application avec App.js)
2. Mettre en place la single page application
3. Créer un git repository pour ce projet 
+ branche Step0 + commit + merge sur master une fois terminé

Step 1 :
0. Nouvelle branche git Step 1 
1. Mettre en place la base de données
Création de la base
Création des tables
Insertion de données pour les tests : tables product et category dans un premier temps
https://mockaroo.com/ pour générer les données des autres tables (user, command et command_line)
2. Créer une classe Rest.js pour l'envoi des requettes Ajax vers l'Api Rest
3. Créer le fichier index.php de l'Api Rest qui recéptionnera les requêtes Ajax
Dans un premier temps le fichier index.php renvoi ce qu'il a reçu (ou false si info indispensable manquante)
4. Tester les nouvelles fonctionnalités
Attention aux infos indispensables pour les requêtes sur la DB !
5. git Commit Step 1 + Merge sur master
6. Nouvelle Branche git Step 2

Step 2 :
1. Créer la classe Db.php qui va permetrre d'effectuer les requêtes SQL
Fonction Connection
Fonction Query générique
Fonction Select
Fonction Insert
Fonction Update
Fonction Delete
2. Tester les nouvelles fonctionnalités avec les fonctions de la classe Rest.js

3. git Commit Step 2 + Merge sur master
4. Nouvelle Branche git Step 3 pour la prochaine étape


Step 3 :

0. Extension TODO Tree bien pratique !
Lors d'un update (put) avec aucune valeur modifiée dans la ligne, l'Api Rest renvoi false (à traiter ultérieurement en JS)

1. Création de la classe Utils qui va nous permettre de stocker des fonctions outils 
String > tryJsonParse() pour convertir les reponses serveur en objet json

2. Création d'une classe Product et convertion json en js Product
Attention au type des données récupérées (string/number/bool)

3. git Commit Step 3 + Merge sur master
4. Nouvelle Branche git Step 4 pour la prochaine étape